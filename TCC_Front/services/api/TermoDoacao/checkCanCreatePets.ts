// services/api/TermoDoacao/checkCanCreatePets.ts - CORRIGIDO PARA PRIMEIRA VEZ

import api from '../api';

interface CheckCanCreatePetsResponse {
  message: string;
  data: {
    podecastrar: boolean;
    temTermo: boolean;
  };
}

/**
 * ‚úÖ Verificar se usu√°rio pode cadastrar pets - AMIG√ÅVEL PARA PRIMEIRA VEZ
 * @returns Promise com status de permiss√£o
 */
export const checkCanCreatePets = async (): Promise<CheckCanCreatePetsResponse> => {
  try {
    const response = await api.get<CheckCanCreatePetsResponse>('/termos-doacao/pode-cadastrar-pets');

    return response.data;
  } catch (error: any) {
    if (error.response) {
      const status = error.response.status;

      // Tratar apenas sess√£o expirada como erro cr√≠tico
      if (status === 401) {
        throw new Error('Sess√£o expirada. Fa√ßa login novamente.');
      }

      // 404, 403, e outros erros = primeira vez ou sem termo (NORMAL)
      if (status === 404 || status === 403) {
        return {
          message: 'Usu√°rio de primeira vez ou sem termo',
          data: {
            podecastrar: false,
            temTermo: false,
          },
        };
      }

      // Outros erros HTTP tamb√©m s√£o tratados como primeira vez

      return {
        message: 'Assumindo primeira vez devido a erro HTTP',
        data: {
          podecastrar: false,
          temTermo: false,
        },
      };
    }

    // Erro de rede
    if (error.request) {
      throw new Error('Erro de conex√£o. Verifique sua internet e tente novamente.');
    }

    // Outros erros - assumir primeira vez
    console.log('‚ÑπÔ∏è Erro desconhecido tratado como primeira vez:', error.message);
    return {
      message: 'Erro desconhecido - assumindo primeira vez',
      data: {
        podecastrar: false,
        temTermo: false,
      },
    };
  }
};

/**
 * üÜï Fun√ß√£o espec√≠fica para verificar se √© primeira vez do usu√°rio
 * @returns Promise indicando se √© primeira vez
 */
export const isFirstTimeUser = async (): Promise<boolean> => {
  try {
    console.log('üîç Verificando se √© primeira vez do usu√°rio...');

    // Tentar buscar termo existente diretamente
    const response = await api.get('/termos-doacao/meu-termo');

    // Se chegou at√© aqui, usu√°rio tem termo
    console.log('‚ÑπÔ∏è Usu√°rio j√° possui termo, n√£o √© primeira vez');
    return false;
  } catch (error: any) {
    if (error.response?.status === 404) {
      // 404 = primeira vez (sem termo)
      console.log('‚úÖ Confirmado: primeira vez do usu√°rio (404)');
      return true;
    }

    if (error.response?.status === 401) {
      // Sess√£o expirada
      throw new Error('Sess√£o expirada. Fa√ßa login novamente.');
    }

    // Outros erros = assumir primeira vez por seguran√ßa
    console.log('‚ÑπÔ∏è Assumindo primeira vez devido a erro:', error.message);
    return true;
  }
};

/**
 * üìä Obter estat√≠sticas gerais dos termos de doa√ß√£o
 */
export const getTermoStats = async () => {
  try {
    console.log('üìä Buscando estat√≠sticas dos termos...');
    const response = await api.get('/termos-doacao/stats');
    console.log('‚úÖ Estat√≠sticas obtidas:', response.data.data);
    return response.data;
  } catch (error: any) {
    if (error.response?.status === 500) {
      throw new Error('Erro no servidor ao buscar estat√≠sticas. Tente novamente.');
    }
    if (!error.response) {
      throw new Error('Erro de conex√£o. Verifique sua internet e tente novamente.');
    }
    throw new Error('Erro ao buscar estat√≠sticas. Tente novamente.');
  }
};

/**
 * ‚úÖ Validar integridade de um termo espec√≠fico
 */
export const validateTermoIntegrity = async (termoId: number) => {
  try {
    console.log('‚úÖ Validando integridade do termo:', termoId);
    const response = await api.get(`/termos-doacao/${termoId}/validate`);
    console.log('‚úÖ Valida√ß√£o conclu√≠da:', response.data.data);
    return response.data;
  } catch (error: any) {
    if (error.response?.status === 401) {
      throw new Error('Sess√£o expirada. Fa√ßa login novamente.');
    }
    if (error.response?.status === 404) {
      throw new Error('Termo n√£o encontrado.');
    }
    if (error.response?.status === 500) {
      throw new Error('Erro no servidor ao validar termo. Tente novamente.');
    }
    if (!error.response) {
      throw new Error('Erro de conex√£o. Verifique sua internet e tente novamente.');
    }
    throw new Error('Erro ao validar termo. Tente novamente.');
  }
};

/**
 * üîÑ Hook para verificar permiss√£o antes de a√ß√µes importantes
 */
export const checkPermissionBeforeAction = async (
  onSuccess: () => void,
  onError: (message: string) => void
): Promise<void> => {
  try {
    const result = await checkCanCreatePets();

    if (result.data.podecastrar) {
      console.log('‚úÖ Usu√°rio tem permiss√£o, executando a√ß√£o...');
      onSuccess();
    } else {
      onError('Voc√™ precisa assinar o termo de responsabilidade antes de cadastrar pets.');
    }
  } catch (error: any) {
    onError(error.message || 'Erro ao verificar permiss√µes. Tente novamente.');
  }
};

export default checkCanCreatePets;
